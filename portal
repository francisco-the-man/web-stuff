<!DOCTYPE html>
<html>
<head>
    <title>Swirling Heartbeat Particle System with Color Gradient</title>
    <style>
        body, html { height: 100%; margin: 0; overflow: hidden; }
        canvas { width: 100%; height: 100%; display: block; }
    </style>
</head>
<body>
<script src="https://cdn.jsdelivr.net/npm/three@0.138.0/build/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three/examples/js/controls/OrbitControls.js"></script>
<script>
document.addEventListener("DOMContentLoaded", function() {
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({antialias: true});
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    const controls = new THREE.OrbitControls(camera, renderer.domElement);
    camera.position.z = 100;

    const redirectThreshold = 10; // Threshold distance to the center for redirection
    const targetURL = "http://example.com/page2"; // URL to redirect to

    const particleCount = 7000;
    const positions = new Float32Array(particleCount * 3);
    for (let i = 0; i < particleCount; i++) {
        const theta = Math.random() * 2 * Math.PI;
        const phi = Math.acos(2.0 * Math.random() - 1.0);
        const r = Math.cbrt(Math.random()) * 50;
        positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);
        positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta);
        positions[i * 3 + 2] = r * Math.cos(phi);
    }

    const geometry = new THREE.BufferGeometry();
    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));

    const material = new THREE.ShaderMaterial({
        vertexShader: `
            uniform float time;
            varying float distanceFromCenter;
            void main() {
                vec3 modPos = position;
                float beat = sin(time * 2.0) * abs(sin(time * 0.5));
                modPos += position * beat * 0.15;
                modPos.x += 10.0 * sin(time + position.x * 2.0);
                modPos.y += 10.0 * cos(time + position.y * 3.0);
                modPos.z += 10.0 * sin(time + position.z * 1.5);
                distanceFromCenter = length(modPos) / 50.0; // Normalized distance
                gl_PointSize = 2.0 + beat * 3.0;
                gl_Position = projectionMatrix * modelViewMatrix * vec4(modPos, 1.0);
            }
        `,
        fragmentShader: `
            varying float distanceFromCenter;
            void main() {
                vec3 neonGreen = vec3(0.0, 1.0, 0.0);
                vec3 yellow = vec3(1.0, 1.0, 0.0);
                float r = 0.0, delta = 0.0, alpha = 1.0;
                vec2 cxy = 2.0 * gl_PointCoord - 1.0;
                r = dot(cxy, cxy);
                if (r > 1.0) {
                    discard;
                }
                vec3 color = mix(neonGreen, yellow, distanceFromCenter);
                gl_FragColor = vec4(color, alpha);
            }
        `,
        uniforms: {
            time: { value: 0.0 }
        },
        transparent: true
    });

    const particles = new THREE.Points(geometry, material);
    scene.add(particles);

    function animate() {
        requestAnimationFrame(animate);
        material.uniforms.time.value = performance.now() / 1000;
        controls.update();
        renderer.render(scene, camera);
        
        // Check camera distance from the center
        if (camera.position.length() < redirectThreshold) {
            window.location.href = targetURL;
        }
    }

    animate();
});
</script>
</body>
</html>
